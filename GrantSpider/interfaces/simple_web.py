import os
import sys
from datetime import datetime
from pathlib import Path
from flask import Flask, render_template, request, jsonify

# Ana dizini Python path'ine ekle
sys.path.insert(0, str(Path(__file__).parent.parent))

from config.settings import settings
from ingestion.vector_store import get_vector_store, search_documents, get_collection_info, reset_global_vector_store
from agents.qa_agent import QAAgent

app = Flask(__name__, 
           template_folder='templates',
           static_folder='static')

# Global deƒüi≈ükenler
chat_history = []
db_connected = False
db_info = {}
qa_agent = None

def detect_language(text: str) -> str:
    """
    Simple language detection function
    
    Args:
        text: Text to analyze
        
    Returns:
        str: 'tr' or 'en'
    """
    # Turkish characters and words
    turkish_chars = ['√ß', 'ƒü', 'ƒ±', '√∂', '≈ü', '√º', '√á', 'ƒû', 'ƒ∞', '√ñ', '≈û', '√ú']
    turkish_words = [
        'nedir', 'nasƒ±l', 'neden', 'nerede', 'ne', 'hangi', 'kim', 'ka√ß', 'kadar',
        'i√ßin', 'ile', 'olan', 'olan', 'bir', 'bu', '≈üu', 'o', 'ben', 'sen',
        'biz', 'siz', 'onlar', 'var', 'yok', 'evet', 'hayƒ±r', 've', 'veya',
        'ama', 'fakat', '√ß√ºnk√º', 'eƒüer', 'ise', 'gibi', 'kadar', 'daha',
        'en', '√ßok', 'az', 'hi√ß', 'her', 'bazƒ±', 't√ºm', 'hep', 'bazen',
        'hibeleri', 'ba≈üvuru', 'kriterleri', 'maliyetleri', 'hesaplanƒ±r',
        'belgeleme', 'gereklilikler', 'uygunluk', 'prosed√ºrler'
    ]
    
    # English words
    english_words = [
        'what', 'how', 'why', 'where', 'when', 'which', 'who', 'how many', 'how much',
        'for', 'with', 'that', 'this', 'a', 'an', 'the', 'i', 'you', 'we', 'they',
        'is', 'are', 'was', 'were', 'have', 'has', 'had', 'will', 'would', 'can',
        'could', 'should', 'may', 'might', 'must', 'and', 'or', 'but', 'because',
        'if', 'then', 'like', 'than', 'more', 'most', 'very', 'much', 'many',
        'some', 'all', 'every', 'each', 'any', 'no', 'none', 'yes', 'specific',
        'accounting', 'documentation', 'requirements', 'personnel', 'costs',
        'employees', 'daily', 'rate', 'calculated', 'compliance', 'eligibility',
        'standards', 'declaring', 'ensure'
    ]
    
    text_lower = text.lower()
    
    # Turkish character check
    turkish_char_count = sum(1 for char in text if char in turkish_chars)
    
    # Turkish word check
    turkish_word_count = sum(1 for word in turkish_words if word in text_lower)
    
    # English word check
    english_word_count = sum(1 for word in english_words if word in text_lower)
    
    # Decision making
    turkish_score = turkish_char_count * 2 + turkish_word_count
    english_score = english_word_count
    
    # If Turkish characters exist, likely Turkish
    if turkish_char_count > 0:
        return 'tr'
    
    # Decide based on word count
    if turkish_score > english_score:
        return 'tr'
    elif english_score > turkish_score:
        return 'en'
    else:
        # Default to Turkish
        return 'tr'

def check_database_connection():
    """Check database connection"""
    global db_connected, db_info, qa_agent
    try:
        # Reset global vector store instance
        reset_global_vector_store()
        
        vector_store = get_vector_store()
        db_info = get_collection_info()
        db_connected = True
        
        # Initialize QA Agent
        qa_agent = QAAgent()
        
        print(f"‚úÖ Database connected: {db_info['document_count']} documents")
        print(f"ü§ñ QA Agent initialized")
        return True
    except Exception as e:
        print(f"‚ùå Database connection error: {e}")
        db_connected = False
        db_info = {}
        qa_agent = None
        return False

def search_with_qa_agent(query: str, max_results: int = 8):
    """Perform intelligent search with QA Agent"""
    try:
        if not db_connected or not qa_agent:
            return None
        
        # Dil algƒ±lama
        detected_language = detect_language(query)
        print(f"üåê Language detected: {detected_language} - Query: '{query[:50]}...'")
        
        # Veritabanƒ±ndan dok√ºmanlarƒ± al
        results = search_documents(query, max_results)
        
        if not results:
            return {
                'answer': f"'{query}' ile ilgili sonu√ß bulunamadƒ±. L√ºtfen farklƒ± anahtar kelimeler deneyin.",
                'sources': [],
                'mode': 'no_results',
                'language': detected_language
            }
        
        # QA Agent i√ßin state hazƒ±rla
        state = {
            "query": query,
            "retrieved_documents": [
                {
                    "content": doc.page_content,
                    "metadata": doc.metadata
                } for doc in results
            ],
            "detected_language": detected_language
        }
        
        print(f"ü§ñ Running QA Agent - Language: {detected_language}")
        
        # QA Agent'ƒ± √ßalƒ±≈ütƒ±r
        result_state = qa_agent.execute(state)
        
        print(f"‚úÖ QA Agent completed - Response length: {len(result_state.get('qa_response', ''))}")
        
        # Kaynaklarƒ± formatla
        sources = []
        for doc in results:
            source = doc.metadata.get('source', 'Bilinmeyen kaynak')
            if source != 'Bilinmeyen kaynak':
                source_name = Path(source).stem
            else:
                source_name = source
            sources.append(source_name)
        
        return {
            'answer': result_state.get("qa_response", "Yanƒ±t olu≈üturulamadƒ±."),
            'sources': sources,
            'mode': 'qa_agent',
            'document_count': len(results),
            'language': detected_language
        }
        
    except Exception as e:
        print(f"‚ùå QA Agent error: {e}")
        return None

def get_demo_response(query: str):
    """Demo yanƒ±tƒ± olu≈ütur"""
    query_lower = query.lower()
    
    if any(word in query_lower for word in ['ba≈üvuru', 'application', 'apply']):
        return """AMIF hibeleri i√ßin ba≈üvuru s√ºreci:

1. **Uygunluk Kontrol√º**: Projenizin AMIF kriterlerine uygun olduƒüundan emin olun
2. **Belge Hazƒ±rlƒ±ƒüƒ±**: Gerekli t√ºm belgeleri hazƒ±rlayƒ±n  
3. **Online Ba≈üvuru**: Resmi portal √ºzerinden ba≈üvurunuzu yapƒ±n
4. **Deƒüerlendirme**: Ba≈üvurunuz uzmanlar tarafƒ±ndan deƒüerlendirilir

*Demo modunda detaylƒ± bilgi sƒ±nƒ±rlƒ±dƒ±r.*"""
    
    elif any(word in query_lower for word in ['entegrasyon', 'integration']):
        return """AMIF Entegrasyon Destekleri:

- **Sosyal Entegrasyon**: Toplumsal uyum projeleri
- **Ekonomik Entegrasyon**: ƒ∞stihdam ve giri≈üimcilik destekleri  
- **Eƒüitim Entegrasyonu**: Dil √∂ƒürenimi ve mesleki eƒüitim
- **K√ºlt√ºrel Entegrasyon**: K√ºlt√ºrlerarasƒ± diyalog projeleri

*Detaylƒ± bilgi i√ßin ger√ßek veritabanƒ± baƒülantƒ±sƒ± gereklidir.*"""
    
    elif any(word in query_lower for word in ['b√ºt√ße', 'budget', 'funding']):
        return """AMIF Finansman Bilgileri:

- **Proje B√ºt√ßeleri**: Deƒüi≈üken tutarlarda destek
- **E≈ü Finansman**: Genellikle %25 e≈ü finansman gerekli
- **√ñdeme Planƒ±**: Avans ve ara √∂demeler mevcut
- **Raporlama**: D√ºzenli mali raporlama zorunlu

*G√ºncel tutarlar i√ßin resmi kaynaklara ba≈üvurun.*"""
    
    else:
        return f"""Bu bir demo yanƒ±ttƒ±r. Sorduƒüunuz soru: '{query}' 

AMIF Grant Assistant sistemi ≈üu anda veritabanƒ± baƒülantƒ±sƒ± olmadan √ßalƒ±≈ümaktadƒ±r. 
Ger√ßek dok√ºman aramasƒ± i√ßin veritabanƒ± baƒülantƒ±sƒ± gereklidir.

**√ñrnek sorular:**
- AMIF hibeleri i√ßin ba≈üvuru kriterleri nelerdir?
- Entegrasyon projeleri i√ßin hangi destekler var?
- Ba≈üvuru s√ºre√ßleri nasƒ±l i≈üliyor?"""

@app.route('/')
def index():
    """Ana sayfa"""
    return render_template('index.html')

@app.route('/api/query', methods=['POST'])
def handle_query():
    """Kullanƒ±cƒ± sorgusunu i≈üle"""
    global chat_history
    
    try:
        data = request.get_json()
        user_query = data.get('query', '').strip()
        
        if not user_query:
            return jsonify({
                'success': False,
                'error': 'Bo≈ü sorgu g√∂nderilemez'
            })
        
        # QA Agent ile akƒ±llƒ± arama yap
        if db_connected and qa_agent:
            qa_result = search_with_qa_agent(user_query)
            
            if qa_result is None:
                # Hata durumunda demo moda ge√ß
                response = get_demo_response(user_query)
                sources = ["Demo Modu - QA Agent Hatasƒ±"]
                mode = 'demo'
                language = 'tr'
            else:
                response = qa_result['answer']
                sources = qa_result['sources']
                mode = qa_result['mode']
                language = qa_result['language']
        else:
            # Demo modu
            response = get_demo_response(user_query)
            sources = [
                "AMIF Programme Manual v1.2 (Demo)",
                "Eligibility Guidelines Document (Demo)",
                "Budget Preparation Instructions (Demo)"
            ]
            mode = 'demo'
            language = detect_language(user_query)
        
        # Chat ge√ßmi≈üine ekle
        chat_entry = {
            'timestamp': datetime.now().isoformat(),
            'query': user_query,
            'response': response,
            'sources': sources,
            'mode': mode,
            'language': language
        }
        chat_history.append(chat_entry)
        
        # Son 50 mesajƒ± tut
        if len(chat_history) > 50:
            chat_history = chat_history[-50:]
        
        return jsonify({
            'success': True,
            'response': response,
            'sources': sources,
            'timestamp': chat_entry['timestamp'],
            'mode': mode,
            'language': language
        })
        
    except Exception as e:
        print(f"‚ùå Query processing error: {e}")
        return jsonify({
            'success': False,
            'error': f'Sorgu i≈ülenirken hata olu≈ütu: {str(e)}'
        })

@app.route('/api/history')
def get_history():
    """Chat ge√ßmi≈üini getir"""
    return jsonify({
        'success': True,
        'history': chat_history[-20:]  # Son 20 mesajƒ± g√∂nder
    })

@app.route('/api/clear_history', methods=['POST'])
def clear_history():
    """Chat ge√ßmi≈üini temizle"""
    global chat_history
    chat_history = []
    return jsonify({
        'success': True,
        'message': 'Ge√ßmi≈ü temizlendi'
    })

@app.route('/api/status')
def get_status():
    """Sistem durumunu kontrol et"""
    # G√ºncel veritabanƒ± bilgisini al
    current_db_info = {}
    current_document_count = 0
    
    if db_connected:
        try:
            current_db_info = get_collection_info()
            current_document_count = current_db_info.get('document_count', 0)
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not get database info in status check: {e}")
            current_document_count = db_info.get('document_count', 0)
    
    return jsonify({
        'success': True,
        'status': {
            'system_ready': True,
            'vector_db_ready': db_connected,
            'qa_agent_ready': qa_agent is not None,
            'document_count': current_document_count,
            'chat_history_count': len(chat_history),
            'database_mode': 'connected' if db_connected else 'demo',
            'embedding_model': current_db_info.get('embedding_model', db_info.get('embedding_model', 'N/A')) if db_connected else 'N/A'
        }
    })

if __name__ == '__main__':
    print(f"\nüåê Starting AMIF Grant Assistant Web Interface...")
    
    # Veritabanƒ± baƒülantƒ±sƒ±nƒ± kontrol et
    check_database_connection()
    
    print(f"üìç Adres: http://localhost:3000")
    print(f"üöÄ Web Interface Ready!")
    print(f"üìä Database status: {'Connected' if db_connected else 'Demo Mode'}")
    print(f"ü§ñ QA Agent status: {'Active' if qa_agent else 'Inactive'}")
    print(f"üåê Language detection: Active")
    
    if db_connected:
        print(f"üìÑ Total documents: {db_info.get('document_count', 'Unknown')}")
        print(f"ü§ñ Embedding model: {db_info.get('embedding_model', 'N/A')}")
    
    print(f"‚ö™ Black-Gray-White theme active")
    print(f"\nOpen http://localhost:3000 in your browser")
    
    app.run(
        host='0.0.0.0',
        port=3000,
        debug=False,
        threaded=True
    )